#ifndef cube_hpp
#define cube_hpp

#include <three-dim-util/abstract-primitive.hpp>
#include <Eigen/Core>

namespace threedimutil
{
    class Cube : public AbstractPrimitive
    {
    public:
        static void Initialize()
        {
            Cube::GetInstance().InitializeInternal();
        }
        
        static void Draw()
        {
            Cube::GetInstance().DrawInternal();
        }
        
        static Cube& GetInstance()
        {
            static Cube cube;
            return cube;
        }
        
    private:
        void CreateVertexData()
        {
            constexpr double raw_vertices[] =
            {
                +0.5, +0.5, +0.5,
                -0.5, +0.5, +0.5,
                -0.5, -0.5, +0.5,
                +0.5, +0.5, +0.5,
                -0.5, -0.5, +0.5,
                +0.5, -0.5, +0.5,
                
                +0.5, +0.5, -0.5,
                +0.5, +0.5, +0.5,
                +0.5, -0.5, +0.5,
                +0.5, +0.5, -0.5,
                +0.5, -0.5, +0.5,
                +0.5, -0.5, -0.5,
                
                -0.5, +0.5, -0.5,
                +0.5, +0.5, -0.5,
                +0.5, -0.5, -0.5,
                -0.5, +0.5, -0.5,
                +0.5, -0.5, -0.5,
                -0.5, -0.5, -0.5,
                
                -0.5, +0.5, +0.5,
                -0.5, +0.5, -0.5,
                -0.5, -0.5, -0.5,
                -0.5, +0.5, +0.5,
                -0.5, -0.5, -0.5,
                -0.5, -0.5, +0.5,
                
                +0.5, +0.5, -0.5,
                -0.5, +0.5, -0.5,
                -0.5, +0.5, +0.5,
                +0.5, +0.5, -0.5,
                -0.5, +0.5, +0.5,
                +0.5, +0.5, +0.5,
                
                -0.5, -0.5, +0.5,
                -0.5, -0.5, -0.5,
                +0.5, -0.5, -0.5,
                -0.5, -0.5, +0.5,
                +0.5, -0.5, -0.5,
                +0.5, -0.5, +0.5
            };
            
            constexpr double raw_normals[] =
            {
                0.0, 0.0, +1.0,
                0.0, 0.0, +1.0,
                0.0, 0.0, +1.0,
                0.0, 0.0, +1.0,
                0.0, 0.0, +1.0,
                0.0, 0.0, +1.0,

                +1.0, 0.0, 0.0,
                +1.0, 0.0, 0.0,
                +1.0, 0.0, 0.0,
                +1.0, 0.0, 0.0,
                +1.0, 0.0, 0.0,
                +1.0, 0.0, 0.0,
                
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,

                0.0, +1.0, 0.0,
                0.0, +1.0, 0.0,
                0.0, +1.0, 0.0,
                0.0, +1.0, 0.0,
                0.0, +1.0, 0.0,
                0.0, +1.0, 0.0,
                
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0
            };
            
            vertices_ = Eigen::Map<const Eigen::MatrixXd>(raw_vertices, 3, 6 * 6);
            normals_  = Eigen::Map<const Eigen::MatrixXd>(raw_normals,  3, 6 * 6);
        }
    };
}

#endif /* cube_hpp */
